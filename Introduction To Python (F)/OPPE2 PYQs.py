# -*- coding: utf-8 -*-
"""Combined OPPE Problems Script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HB6AJJtU1538yz1WHZkEmCIx3wwo2VWe
"""

# Python OPPE Problems Compilation
# This file contains a collection of Python programming problems and their solutions
# extracted from the provided PDF exam sets. Each problem is separated by a
# comment block for clarity and can be run independently.

from collections import Counter
import math

# ----------------------------------------------------------------------
# OPPE 2 MAY 24 - Set 1
# ----------------------------------------------------------------------

# Q1.1: Calculate the percentage increase from an original value to a new value.
def percentage_increase(original, new):
    """Calculates the percentage increase from the original value to the new value."""
    if original == 0:
        return float('inf') if new > 0 else 0.0
    increase = new - original
    return (increase / original) * 100

# Q1.2: Check if a number is a 10-digit even number.
def is_ten_digit_even(n):
    """Returns True if the number is a 10 digit even number, False otherwise."""
    s = str(abs(n))
    return len(s) == 10 and int(s[-1]) % 2 == 0

# Q1.3: Find all indices of an element in a list.
def find_indices_of_element(l, elem):
    """Finds all indices of an element in a list."""
    return [i for i, x in enumerate(l) if x == elem]

# Q1.4: Swap every pair of adjacent elements in a tuple of even length.
def swap_adjacent_elements(t):
    """Swaps every pair of adjacent elements in a tuple of even length."""
    lst = list(t)
    for i in range(0, len(lst), 2):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return tuple(lst)

# Q1.5: Find unique common characters in two words, returned as a sorted string.
def common_chars(word1, word2):
    """Finds unique common characters and returns them as a sorted string."""
    common = set(word1) & set(word2)
    return "".join(sorted(list(common)))

# Q1.6: Count the number of occurrences of each value in a dictionary.
def count_values_occurrences(d):
    """Counts the number of occurrences of each value in a dictionary."""
    return dict(Counter(d.values()))

# Q1.7: Find the longest common prefix among all words in a sentence.
def longest_common_prefix(sentence: str) -> str:
    """Finds the longest common prefix among the words of a sentence."""
    words = sentence.split()
    if not words:
        return ""
    shortest = min(words, key=len)
    for i, char in enumerate(shortest):
        for word in words:
            if word[i] != char:
                return shortest[:i]
    return shortest

# ----------------------------------------------------------------------
# OPPE 2 MAY 24 - Set 2
# ----------------------------------------------------------------------

# Q2.1: Calculate the product of the digits of an integer.
def digit_product(n: int) -> int:
    """Calculates the product of the digits of an integer."""
    s = str(abs(n))
    product = 1
    for digit in s:
        product *= int(digit)
    return product

# Q2.2: Capitalize the first and last characters of each word in a sentence.
def capitalize_first_and_last(sentence: str) -> str:
    """Capitalizes the first and last characters of each word in a sentence."""
    words = sentence.split(' ')
    capitalized_words = []
    for word in words:
        if len(word) > 1:
            capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()
            capitalized_words.append(capitalized_word)
        elif len(word) == 1:
            capitalized_words.append(word.upper())
    return ' '.join(capitalized_words)

# Q2.3: Find the k-th longest word in a list where each word has a unique length.
def kth_longest_word(words: list, k: int) -> str:
    """Finds the k-th longest word in a list (assumes unique lengths)."""
    sorted_words = sorted(words, key=len, reverse=True)
    return sorted_words[k - 1]

# Q2.4: Convert a flat tuple of length m*n into a m x n tuple of tuples.
def unflatten(t: tuple, m: int, n: int) -> tuple:
    """Converts a flat tuple to a 2D tuple of size m x n."""
    result = []
    for i in range(m):
        start = i * n
        end = start + n
        result.append(t[start:end])
    return tuple(result)

# Q2.5: Check if a sentence is a heterogram (no repeated letters).
def is_heterogram(sentence: str) -> bool:
    """Checks if a sentence is a heterogram (no letter of the alphabet occurs more than once)."""
    seen = set()
    for char in sentence.lower():
        if 'a' <= char <= 'z':
            if char in seen:
                return False
            seen.add(char)
    return True

# Q2.6: Filter a dictionary in-place, keeping keys where value > threshold.
def filter_keys_by_value(d: dict, threshold: int) -> None:
    """Filters a dictionary in-place, keeping keys where value is greater than a threshold."""
    keys_to_remove = [key for key, value in d.items() if value <= threshold]
    for key in keys_to_remove:
        del d[key]

# ----------------------------------------------------------------------
# OPPE 2 MAY 24 - Set 3
# ----------------------------------------------------------------------

# Q3.1: Given a list of integers, return the second largest number.
def second_largest(lst: list) -> int:
    """Returns the second largest number in a list of integers."""
    unique_sorted = sorted(list(set(lst)), reverse=True)
    return unique_sorted[1]

# Q3.2: Perform arithmetic operations on a tuple of two integers.
def arithmetic_operations(t: tuple) -> tuple:
    """Returns a tuple with sum, difference, product, and quotient of two numbers."""
    a, b = t
    return (a + b, a - b, a * b, a // b)

# Q3.3: Find items present in either list but not in both (symmetric difference).
def not_present_in_both(lst1: list, lst2: list) -> set:
    """Returns a set of items present in either list, but not both."""
    return set(lst1).symmetric_difference(set(lst2))

# Q3.4: Rearrange a string: even-indexed chars first, then reversed odd-indexed chars.
def modify_string_1(s: str) -> str:
    """Rearranges string with even chars first, then reversed odd chars."""
    return s[::2] + s[1::2][::-1]

# Q3.5: Create a dictionary with items from list1 as keys and their counts in list2.
def create_count_dict(lst1: list, lst2: list) -> dict:
    """Creates a dict with items from lst1 as keys and their counts in lst2 as values."""
    return {item: lst2.count(item) for item in lst1}

# Q3.6: Return the average of numbers in a mixed list, rounded to two decimal points.
def average_of_numbers(lst: list) -> float:
    """Returns the average of numbers in a mixed list, rounded to two decimal points."""
    numbers = [x for x in lst if isinstance(x, (int, float))]
    if not numbers:
        return -1.0
    return round(sum(numbers) / len(numbers), 2)

# ----------------------------------------------------------------------
# Sep Oppe 2 - Set 1
# ----------------------------------------------------------------------

# Q4.1: Check if a number is an even two-digit number (ignoring sign).
def is_even_two_digit_number(num):
    """Determines whether a given number is an even two-digit number."""
    return 10 <= abs(num) <= 99 and num % 2 == 0

# Q4.2: Check if a domain string ends with '.com' or '.in'.
def is_dot_com_or_dot_in(domain):
    """Checks whether a given domain ends with '.com' or '.in'."""
    return domain.endswith('.com') or domain.endswith('.in')

# Q4.3: Check if an element is present in opposite halves of two lists.
def is_present_in_opposite_halves(elem, l1: list, l2: list):
    """Checks if an element is in opposite halves of two lists."""
    mid1, mid2 = len(l1) // 2, len(l2) // 2
    in_l1_h1 = elem in l1[:mid1]
    in_l1_h2 = elem in l1[mid1:]
    in_l2_h1 = elem in l2[:mid2]
    in_l2_h2 = elem in l2[mid2:]
    return (in_l1_h1 and in_l2_h2) or (in_l1_h2 and in_l2_h1)

# ----------------------------------------------------------------------
# Sep Oppe 2 - Set 2
# ----------------------------------------------------------------------

# Q5.1: Calculate the sum of two integers after flooring each to the nearest ten.
def sum_of_floored_to_tens(a:int, b:int):
    """Calculates the sum of two integers after flooring each to the nearest lower multiple of 10."""
    return (a // 10) * 10 + (b // 10) * 10

# Q5.2: Surround the first two and last two characters of a string with brackets.
def surround_first_two_and_last_two_with_brackets(s: str):
    """Surrounds the first two and last two characters of a string with square brackets."""
    if len(s) < 4:
        return f"[{s}]"
    return f"[{s[:2]}]{s[2:-2]}[{s[-2:]}]"

# Q5.3: Return the number with more unique digits. If tied, return a tuple.
def number_with_more_unique_digits(n1:int, n2:int):
    """Returns the number with more unique digits, or a tuple if tied."""
    unique1, unique2 = len(set(str(n1))), len(set(str(n2)))
    if unique1 > unique2: return n1
    if unique2 > unique1: return n2
    return (n1, n2)

# ----------------------------------------------------------------------
# Sep Oppe 2 - Set 3
# ----------------------------------------------------------------------

# Q6.1: For a two-digit number, calculate product of (sum of digits) and (abs diff of digits).
def product_of_sum_and_abs_diff_of_digits(num: int):
    """Calculates the product of the sum and absolute difference of digits of a two-digit number."""
    d1, d2 = num // 10, num % 10
    return (d1 + d2) * abs(d1 - d2)

# Q6.2: Check if a number is divisible by both of its last two digits.
def is_divisible_by_last_two_digits(num: int):
    """Checks if a number is divisible by its last two digits. Returns False if either digit is 0."""
    if num < 10: return False
    last, second_last = num % 10, (num // 10) % 10
    if last == 0 or second_last == 0:
        return False
    return num % last == 0 and num % second_last == 0

# Q6.3: Swap the last characters of the values for two specified keys in a dictionary.
def swap_last_chars_of_values(d: dict, k1, k2):
    """Swaps the last characters of the string values for two keys in a dict (in-place)."""
    val1, val2 = d[k1], d[k2]
    d[k1] = val1[:-1] + val2[-1]
    d[k2] = val2[:-1] + val1[-1]